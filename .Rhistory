GTGTTAGGAAAAGGGCGTACAGGACTAGAAAGCAGATGAGAAAAATGATTATGAGGGCAT
GATCATGAAAGATGATTAGTTCTTCTATGATAGGAGAAGTAGCGTCTTGTAGACCTACTT
GTGCTGCATGTGCCATTAAGATATACGGGGTTTAACCTGTAACTTAACTTTGACAAAGTT
ATGAAATGGTTTTTCTAATATCTTTTTGAAAAAGTCATAGAGGCTGTGGGGTTGGCTTGA
AACCAGCTTTAGGAGGTTTCATTCCTTCCTTTTTCGTCTAGGTTTTATGTATATGGGTTC
TTCGAACGTATGATAGGGTGGAAGGCATCCATATAGCCACTCCAGGTTGGTGGAGGGTTG
TTCGATTATTAGGGCTTTTCGTTTTGAAGCGAAGCCTTCTCAAATTATAAAAATTATTAG
TATTACTGCTGTTAGGGAAATAAATGAGCCTACAGATGATAGAATATTTCATGTGGTGTA
TGCATCGGGGTAGTCCGAGTAACGTTGGGGTATTCCAGATAGGCCAAGAAAGTGTTGTGG
GAAGAAAGTTAGATTTACACCAATGAACATGATAGCAAAATGAATTTTGGCATAGGTTTG
GTCTAGAGTGTAACCTGAGAACAGAGGGAATCAGTGGATAAAACCCCCTATGATGGCGAA
TACAGCTCCTATTGATAGAACGTAATGGAAGTGAGCTACGACGTAGTATGTATCGTGTAG
TATGATATCTAATGATGAGTTTGCTAATACAATGCCGGTTAGGCCACCTACAGTGAAGAG
AAAAATGAACCCTAGGGCTCAGAGTACTGCAGCAGATCATTTGGTATTGCTTCCGTGGAG
TGTAGCGAGCCAACTAAATACTTTGACGCCAGTGGGAATAGTGATAATTATGGTAGCAGA
GGTGAAGTAGGCTTGTGTGTCTACGTCTATTCCTACTGTAAATATATGGTGGGCTCATAC
AATAAATCCTAAGAAACCAATTGATATCATAGCCCAGACCATGCCTATATACCCGAATGG
TTCCTTTTTTCCGGGGTAGTAAGTTACAATGTGGGAAATTATTCCAAAGCCTGGTAGGAT
AAGAATATAAACTTCGGGGTGGCCAAAAAAATCAGAATAGGTGTTGGTACAGGATAGGGT
CTCCTCCTCCGGCCGGGTCAAAGAAGGTGGTATTGAGGTTGCGGTCTGTTAATAACATGG
TAATGCCAGCAGCTAGGAGTGGGAGGGATAGGAGAAGCAGGACTGCTGTGATTAAGACGG
ATCAGACGAAAAGGGGTGTTTGGTATTGAGTTATGGCAGGGGGTTTTATATTGATAATTG
TTGTAATGAAGTTGTAAAGTTGTAATGTTGTAATGTTGTAATTGTTGTAATGAAGTTGAT
AGCTCCTAGAATAGAGGAGATGCCTGCTAGATGCAAGGAAAAAATGGTCAGATCTACGGA
AGCTCCAGGGTGGGAGTAATTTCCTGCTAAGGGAGGGTAAACTGTCCAACCTGTTCCGGC
ACCGGCTTCCACTATGGCAGATGCGAGCAGAAGGAAGGAGGGAGGAGTCAGAAGCTTATG
TTATTTATACGGGGAACGCCATGTCGGGGGCACCAATTATTAGGGGAACTAGCCAGTTGC
CAAAGCCTCCGATTATGATGGG
")
View(test)
head(test)
test <- find_tandem_repeats("
>5 dna:chromosome chromosome:GRCh38:5:100047704:100055045:1
CCTCCTATTTTTCGAATGTCTTGTTCATTGTTGAGGTTATGGATAATGGATCCGGAGCAT
ACAAATAGCATGGCTTTGAAGAAGGCGTGGGTACAGATGTGTAGGAATGCTAGGTATGGC
TGGTTGATGCCGATTGTGACTATTATGAGTCCCAATTGGCTTGAAGTAGAGAAGGCCACG
ATTTTTTTGATATCATTTTGTGTGAGGGCGCAGACTGCTGCGAGTAGGGTAGTTATAGCG
CCTAAACATAGTGTGAGGGTTTGGGTTGGCGGGCTATTTTCTGCTAGGGGGTGGAAGCGG
ATGAGTAGAAAGACCCCAGCTACAACTATGGTGCTTGAGTGGAGTAGGGCTGAGACAGGG
GTAGGGCCTTCCATGGCTGAGGGGAGTCAGGGGTGAAGGCCTAGTTGAGCTGATTTTCCT
GCTGCTGCTAGGAGGAAACCTAGTAGTGGGATAAGGTTGGGGTTAGCACTTAAGAGGAAT
ATTTGTTGTGGTTCTCATGAGTTGGAGTGTAGGAAAAATCATGCTAGGGCTAGGATGAAG
CTGATGTCACCAATATGGTTGTATAGGATTGCTTGGACGGCTGCTGTGTTGGCATCTGTT
CGAGCATACCACCAGCTAATGAGTAAGAAGGATATAATCCCTACGCCCTCTCAGCCGATG
AAGAGTTGGAATAGGTTGTTAGCTGTAACTAGGATTAGTATGGTGATTAGGAAAATAAGC
AGATACTTGAAAAATTGATTAATGTTTGGGTCTGAGCTTATATACCATAGTGAGAATTCT
ATGATGGATCATGTGACGAATAGTGCTACAGGGATTAATATTATGGAGAAATAGTCTAGT
TTAAAGCTTAGCGAGAGTTGTATTGTTTGGGTTGTTGCTCAGTGTCAGTTTGAGATAATA
ACTTCTTGGTCTAGGCATATGAATATTGTTGTGGGGAGGAGGCTAATAATAAAGGCGGAT
GCAATAATTGATTTTACATAGTGGGGGTATGAACTCTTTTTGTTAGGGTTGATGAAGGTG
GCAATGATCGGGGGAATTAAGGAAGTTAGGGCTAGGATGGTTATGGTGGCATACATGGTT
ATTACTTTTATTTGGAGTTGCACCAAAATTTTTGGGGCCTAAGACCAACGGATGGCTGTT
ATCCTTTAAAAGTCGAGAAAGCCATGTTGTTAGACATGGGAGTATGAGTTAGCAGTTCTT
ATGAGCTTTCTCGGTAAATAAGGGGCTGTGAGCCTCTGTTATCAGATTCACAATCTGATG
TTTTGGTTAAACTATATTTACAGGAGGTAAAACCGGTAATGATATCAGGGTTAAGGGATA
GGAGGAGGATGGGGGATAGGTGTATGAATATGAGAGTGTTTTCTCGTGTAAGTGAGGGTT
TTATGTTGTTAATGTGGTGTGTGAGCGAGCCTCATTGTGTTGTGGTAAATATATAGAGGG
AGTATAGGGCTGTGATTAGTATGTTAAGTCCTGTGAGTAGGAGGGTGATGTTTGATCAGG
AGAATGAGGTCACTAGTACGAAGAGTTCTCCTAGTAGGTTAATGGTGGGGGGCAAAGCGA
GGTTGGCGAGGCTTGCCAGAAGTCATCAAAAGGCTATTAGTGGGAGTAGGGTTTGAAGTC
CTTGAGAGAGAATTATGATGCGGCTGTGGGTTCGCTCGTAGTTTGAGTTTGCTAGGCAGA
AAAATAAGGAGGATGTAAGTCCGTGGGCAATTATGAGAATGACTGCGCCGGTGAAGCTTC
AGGGGGTTTGGATGAGAATAGCTGTTACTATGAGGGCTATGTGGCTAATTGAAGAGCATG
CAATGAGTGATTCTAAGTCTGTTTGTCGTAGGCAGATGGAGCTTGTTATGATTATGCCTC
ATAGAGATAGTATGAGGAAGGGATAAGCTATGTGTTTTGTCAGGGGGTTGAGAATGAGGG
TGAGGCGCATTATGCCATAGCCACCTAATTTTAAGAGCACTGCAGCGAGTACTATTGAGC
CAGCAATGGGGGCTTCAACATGGGCTTTAGGGAGTCATAGGTGGAGTCTGTAGAGGGGCA
TTTTTACTATGAAAGCTATTGTGTATGCTAGTCATATTAAGTTACTAGCTCAGGAGTTTG
ATAGCTCTTGGGCAGTAAGGGTGAGTAATAAAATATTTAGTGAGCCCAGGGTGTTGTGTG
TGTGGATTAATGCGATGAGTAGGGGGAGGGAGCCCACTAGGGTATAAAATAGGAAATATG
TGCCTGCGTTTAGACGTTCCGTTTGGTTGCCTCATCGGGTGATAATAGCTAGGGTGGGGA
TAAGTGTGGCTTCGAAGAAGATGTAGAATATAATTAGTTCTGTGGCTGTGAATGTTATAA
TTAAGGAGTTTTGGAGGAAGATTAGTATAGAGACGTAGAGTTTTTTTCGTGATAGGGGTT
CGTTGAATAGGTGGCGTTGGCTTGCTATGATTATGAGGGGTAGGAGTCAGGTTGTCCGTA
TTAGAAGGGGGGTCGTTAGGGGGTCGGAGGAGAAGGATAGAGAATAGCTATATAGGTTGT
TGTTGATCTGGTTGAAAAATAGTAGGGGGATAATGCTGATAATTAGGCTGTGGGTGGTTG
TGTTGATTCAAATTATATGTTTTTTGGAGAATCATGTTAGTGGTAGTAATATGATTGTTG
GAATAATTAGTTTTAGCATTGGAGTAGGTTTAGGTTATGGGCGTAGTCCAAGCCGTATGT
GTTGGAGATTGAAACTAGTAGGGCTAGGCCTACTGCTGCCTCGCAGGCAGCAAAGACTAA
TATGGTGATAGGCACGATGTTGGCTAAGAGGGAGTGGGTGTTAAGGGTTATGAGAGTAGC
CATAATAAATAATGACAATATTATTCCTTCTAGACATAGTAGGGAGGATATCAGGTGTAA
GCGGTATACTAATATTCCTAGAAGTGAGATAGTAAATGCTAGTATAATATTTATATAAAT
AAGGGGCATTTGGTAAATATGACTATCATAATTTAATCAGTCGAAATCATTCGTTTTATT
TAAACTATGTACCAATTCGGCTCAGTCTAATCCCTTTTGTGATCATTCGTAGGCTAGGCT
TAGGGTTAGGATAATGATTAATAAGAGGGATGATATGACTGTTAGTGGTAAGTTGGTTGT
TTGTAGGGCTCATGGTAAGGGCAGTAGGAGAGCAATTTCTAGGTCAAATAATAGAAAGGT
GATGGCTACTAAGAAGAATTTCATGGAGAAAGGAATGCGGGTGGGGAATAGGGGGTCGAA
GCCACATTCGTAAGGGTTGGATTTTTCTATGTAACTGTTGAGTTGTGGTAATCAGAATGT
AATAACTATTAATAGTAGGGCTAGGAGGGTATTGACTATTAGAATTAGGGCGAAGTTTAT
TACTCTTTTTTGAATATCATCAAAACTAGTTAATTGGAAGTTAACGGTACTGTTTATACT
AAAAGAGTAGGATCCTCATCAGTAGATTGAGACGTATAGAAATAGTCAGACTACATCTAT
GAAGTGTCAGTACCAGGCGGCGGCTTCAAAGCCGAAGTGATGTTTAGATGTAAAGTGAAA
TGTTAGTTGGCGGATGAGGCAAATAGTGAGGAAAGTTGATCCAATGATGACGTGGAGTCC
GTGAAAGCCTGTGGCTACAAAAAATGTTGAGCCATAGATGCCGTCGTCAGAGATGGTAAA
GGGCGTTTCGAAATACTCTGAGGCTTGTAGGAGGGTAAAGTAAACACCTAGTAAAATTGT
AATAAGTAACGCTTGAATTATTTGGTTTCGATTATTTTCTATTAGGCTGTGGTGGGCTCA
AGTGATTGAGACTCCTGATGCGAGTAGTACGGATGTGTTCAGAAGTGGGACTTCTGGGGG
TTCAGTGGGGTGATGCCTGTTGGAGGTCAGTGTCCTCCTAGTTGGGGGGTAGGGGCTAGG
CTGGAATGGTAGAAAGCTCAGAAAAATCTGGCGAAGAAGAAGATTTCTGAGGCGATAAAT
TGGACTATTCCATATCGGAGACCTTTTTGGATGGGTGGTGTGTGGTGGCCTTGGTACGTG
CTTTCTCGCATTACATCACGTCACCATTGGTATATGGTTAGCGCGTTGGTTAGTAGGCCT
AGTGTGAGTAGGGTTGTGGAATAGAAGTGGAATCATATGGCTAAGCCAGAGGTTATCAGG
AGGGCTGAGAGGGCCCCCGTTAGGGGTCATGGGCTGGGTTTTACTATATGGTAGGCATGT
GATTGGTGGGCCATTATGTGTTGTCGTGTAGGTAGGGGCTCACTAGAAGTGTAAAAACGT
AGGCTTGGATTAGGGCAACAGCGATTTCTAGAATAGTTAATAGAATTAGGATTATGAAGA
TGATGAGCGTTGAGGGGAGGTTAACAGTTGATATTGCTAGTGTGGCACTTCCAATTAAGT
GCATAAGTAGGTGGCCTGCAGTGATGTTAGCAGTTAGGCGTACGGCTAGGGCTACTGGTT
GAATAAGTAGGCTGATGGTTTCAATAATGATTAATATGGGAATAAGGGGTGCAGGTGTGC
CCTGTGGTAGGAGATGGGCTAGGGCATTTTTGGTTTTAGAGCGAAGGCCTGTAATTACTG
TACCTGTTCACAGGGGGATGGCCATGGCTAGGTTTATAGATAGTTGGGTGGTTGGTGTAT
ATGAGTGGGGCAGGAGTCCGAGGAGATTAGTTGTGTCAATAAAAGTAATTAAGGATATTA
GTATGAGAGATCAGGTTCGTCCTTTGGCGTTATGTATAGCTATTATTTGTTTTGAGGTCA
GTTGAATTAGCCACTGTTGAGTAGTAATCAGTCGGTTGTTGATGAGGTGTTTGGAGGTGG
GGATTAGTAAAGGGGGAAATAGAATGATCAGTACTGCGGCGGGTAGGCCTAGAACTGTAG
GGCCAATGAATGAAGCGAATAGATTTTCGTTCATTTTGGTTCTCAGGGTTTATCGTAGTT
TTTTATTTTAATGGGTTTTGGTGAAGGGGTGAATGGTAATTTGTATTTAATATTTTTAGT
TGGGTGATGAGAAATAGTGTGAGGAGTATTGGGGTAATGATGGTGGGTCATACAGTGGTG
TTTAGCTGTGGCATTTTCACTGTAAAGAGGTAGTGATTCTCTCAATCTTTAACTTAAAAG
GTTAATGCTAGGTTAACTTTACAGTGGGCTCTGGAGAGGGGTGAAAGGTGTGTTATAGGG
TGAATATGGGTCCTATTTCAAAGATTTTTAGGGGAATTAATTCTAGGACGATGGGCATAA
AACTGTGGTTTGCTCCACAGATTTCTGAGCATTGGCCGTAGTATACCCCTGGTCGTGTAG
CGGTGAATGTGGTTTGGTTCAGGCGTCCGGGAATTGCATCTGTTTTTAGGCCCAGTGTGG
GGACAGCTCATGAGTGTAAGACATCCTGTGATGTAATTATTATACGGACGGGGGCCTCAA
CTGGGAGGACCACCCGGTTATCAACGTCAAGGAGTCGTAGGTCACCTGGTTCTAGGAATA
ATGGGGGGAGTATATAGGAGTTGAAGATTAGTCCACCATAGTCAGTGTATTCATAGGTTC
AATACCATTGATGTCCAATTGATTTGATAGTAAAGGAGGGGTCGTTGATCTCATCTGTTA
TGTAGAGGATACGTAGGGATGGGAGGGCGATTAGGACTAGGATAATAGTGGGTAGGATCG
TTCAGACGGTTTCTATCTCTTGGACGTCTGAGATACTAGTATTAGTTAGTTTTGTTGTGA
GTGTTAGGAAAAGGGCGTACAGGACTAGAAAGCAGATGAGAAAAATGATTATGAGGGCAT
GATCATGAAAGATGATTAGTTCTTCTATGATAGGAGAAGTAGCGTCTTGTAGACCTACTT
GTGCTGCATGTGCCATTAAGATATACGGGGTTTAACCTGTAACTTAACTTTGACAAAGTT
ATGAAATGGTTTTTCTAATATCTTTTTGAAAAAGTCATAGAGGCTGTGGGGTTGGCTTGA
AACCAGCTTTAGGAGGTTTCATTCCTTCCTTTTTCGTCTAGGTTTTATGTATATGGGTTC
TTCGAACGTATGATAGGGTGGAAGGCATCCATATAGCCACTCCAGGTTGGTGGAGGGTTG
TTCGATTATTAGGGCTTTTCGTTTTGAAGCGAAGCCTTCTCAAATTATAAAAATTATTAG
TATTACTGCTGTTAGGGAAATAAATGAGCCTACAGATGATAGAATATTTCATGTGGTGTA
TGCATCGGGGTAGTCCGAGTAACGTTGGGGTATTCCAGATAGGCCAAGAAAGTGTTGTGG
GAAGAAAGTTAGATTTACACCAATGAACATGATAGCAAAATGAATTTTGGCATAGGTTTG
GTCTAGAGTGTAACCTGAGAACAGAGGGAATCAGTGGATAAAACCCCCTATGATGGCGAA
TACAGCTCCTATTGATAGAACGTAATGGAAGTGAGCTACGACGTAGTATGTATCGTGTAG
TATGATATCTAATGATGAGTTTGCTAATACAATGCCGGTTAGGCCACCTACAGTGAAGAG
AAAAATGAACCCTAGGGCTCAGAGTACTGCAGCAGATCATTTGGTATTGCTTCCGTGGAG
TGTAGCGAGCCAACTAAATACTTTGACGCCAGTGGGAATAGTGATAATTATGGTAGCAGA
GGTGAAGTAGGCTTGTGTGTCTACGTCTATTCCTACTGTAAATATATGGTGGGCTCATAC
AATAAATCCTAAGAAACCAATTGATATCATAGCCCAGACCATGCCTATATACCCGAATGG
TTCCTTTTTTCCGGGGTAGTAAGTTACAATGTGGGAAATTATTCCAAAGCCTGGTAGGAT
AAGAATATAAACTTCGGGGTGGCCAAAAAAATCAGAATAGGTGTTGGTACAGGATAGGGT
CTCCTCCTCCGGCCGGGTCAAAGAAGGTGGTATTGAGGTTGCGGTCTGTTAATAACATGG
TAATGCCAGCAGCTAGGAGTGGGAGGGATAGGAGAAGCAGGACTGCTGTGATTAAGACGG
ATCAGACGAAAAGGGGTGTTTGGTATTGAGTTATGGCAGGGGGTTTTATATTGATAATTG
TTGTAATGAAGTTGTAAAGTTGTAATGTTGTAATGTTGTAATTGTTGTAATGAAGTTGAT
AGCTCCTAGAATAGAGGAGATGCCTGCTAGATGCAAGGAAAAAATGGTCAGATCTACGGA
AGCTCCAGGGTGGGAGTAATTTCCTGCTAAGGGAGGGTAAACTGTCCAACCTGTTCCGGC
ACCGGCTTCCACTATGGCAGATGCGAGCAGAAGGAAGGAGGGAGGAGTCAGAAGCTTATG
TTATTTATACGGGGAACGCCATGTCGGGGGCACCAATTATTAGGGGAACTAGCCAGTTGC
CAAAGCCTCCGATTATGATGGG
")
View(test)
test[["length"]]
length("TTTTTTTTTTTTTTTTGAGACAAAGTCTCACGCTCTGTCACCCAGGCTGGAGTGCAGTGGCGCAG")
str_length("TTTTTTTTTTTTTTTTGAGACAAAGTCTCACGCTCTGTCACCCAGGCTGGAGTGCAGTGGCGCAG")
sringr::str_length("TTTTTTTTTTTTTTTTGAGACAAAGTCTCACGCTCTGTCACCCAGGCTGGAGTGCAGTGGCGCAG")
stringr::str_length("TTTTTTTTTTTTTTTTGAGACAAAGTCTCACGCTCTGTCACCCAGGCTGGAGTGCAGTGGCGCAG")
97/65
138/65
setwd("~/")
read.delim("test.2",header = FALSE)
test <- read.delim("test.2",header = FALSE)
View(test)
readr::parse_integer(test)
readr::parse_number(test)
View(test)
View(test)
as.numeric(gsub("\\D", "", test$V1))
test$number <- as.numeric(gsub("\\D", "", test$V1))
View(test)
test <- read.delim("test.2",header = FALSE)
test$bp <- as.numeric(gsub("\\D", "", test$V1))
View(test)
test <- read.delim("test.2",header = FALSE)
test$bp <- as.numeric(gsub("\\D", "", test$V1))
test$over65 <- 0
intermediate.df <- data.frame()
for(number in 1:nrow(test)){
row <- test[number,]
if(row$bp > 65){
over65 <- row$bp/65
row$over65 <- ceiling(over65)
}
intermediate.df <- rbind(intermediate.df,row)
}
test$over65 <- intermediate.df$over65
View(test)
test <- read.delim("test.2",header = FALSE)
test$bp <- as.numeric(gsub("\\D", "", test$V1))
test$grep <- 0
intermediate.df <- data.frame()
for(number in 1:nrow(test)){
row <- test[number,]
if(row$bp > 65){
over65 <- row$bp/65
row$grep <- ceiling(over65)
}
intermediate.df <- rbind(intermediate.df,row)
}
test$grep <- intermediate.df$grep
test$grep[test$grep == 0] <- test$bp[test$grep == 0]
View(test)
View(test)
grep.df <- data.frame()
for(number in 1:nrow(test)){
row <- test[number,]
line <- paste0("grep -A ",test$grep," '",test$V1,"' test")
grep.df <- rbind(grep.df,line)
}
View(grep.df)
grep.df <- data.frame()
for(number in 1:nrow(test)){
row <- test[number,]
line <- paste0("grep -A ",row$grep," '",row$V1,"' test")
grep.df <- rbind(grep.df,line)
}
View(grep.df)
View(grep.df)
View(grep.df)
View(grep.df)
names(grep.df) <- NULL
View(grep.df)
grep.df <- data.frame()
for(number in 1:nrow(test)){
row <- test[number,]
line <- paste0("grep -A ",row$grep,"'",row$V1,"' test")
grep.df <- rbind(grep.df,line)
}
names(grep.df) <- NULL
View(grep.df)
test <- read.delim("test.2",header = FALSE)
test$bp <- as.numeric(gsub("\\D", "", test$V1))
test$grep <- 0
intermediate.df <- data.frame()
for(number in 1:nrow(test)){
row <- test[number,]
if(row$bp > 65){
over65 <- row$bp/65
row$grep <- ceiling(over65)
}
intermediate.df <- rbind(intermediate.df,row)
}
test$grep <- intermediate.df$grep
test$grep[test$grep == 0] <- test$bp[test$grep == 0]
grep.df <- data.frame()
for(number in 1:nrow(test)){
row <- test[number,]
line <- paste0("grep -A ",row$grep,"'",row$V1,"' test")
grep.df <- rbind(grep.df,line)
}
names(grep.df) <- NULL
View(test)
View(grep.df)
test <- read.delim("test.2",header = FALSE)
test$bp <- as.numeric(gsub("\\D", "", test$V1))
test$grep <- 0
intermediate.df <- data.frame()
for(number in 1:nrow(test)){
row <- test[number,]
if(row$bp > 65){
over65 <- row$bp/65
row$grep <- ceiling(over65)
}
intermediate.df <- rbind(intermediate.df,row)
}
test$grep <- intermediate.df$grep
test$grep[test$grep == 0] <- test$bp[test$grep == 0]
grep.df <- data.frame()
for(number in 1:nrow(test)){
row <- test[number,]
line <- paste0("grep -A ",row$grep," '",row$V1,"' test")
grep.df <- rbind(grep.df,line)
}
names(grep.df) <- NULL
View(grep.df)
write.table(grep.df,"test.3",row.names = FALSE,col.names = FALSE,quote = FALSE)
grep.df <- data.frame()
for(number in 1:nrow(test)){
row <- test[number,]
line <- paste0("grep -A ",row$grep," '",row$V1,"' test >> test.4")
grep.df <- rbind(grep.df,line)
}
names(grep.df) <- NULL
write.table(grep.df,"test.3",row.names = FALSE,col.names = FALSE,quote = FALSE)
library(Biostrings)  # Load the Biostrings package for sequence analysis
find_tandem_repeats <- function(sequence, min_repeat_length = 2) {
tandem_repeats <- list()
pattern <- "(.{"  # Start building the pattern
for (length in min_repeat_length:floor(nchar(sequence) / 2)) {
pattern <- paste0(pattern, length, "}(?:\\1)+|")  # Add the length to the pattern
}
pattern <- substr(pattern, 1, nchar(pattern) - 1)  # Remove the trailing "|"
pattern <- paste0(pattern, ")")  # Close the pattern
matches <- gregexpr(pattern, sequence, perl = TRUE)
for (i in seq_along(matches)) {
match <- matches[[i]]
if (attr(match, "match.length")[1] > 0) {
tandem_repeats <- c(tandem_repeats, match)
}
}
return(tandem_repeats)
}
compare_and_find_similar_repeats <- function(repeats1, repeats2, max_mismatches = 1) {
similar_repeats <- list()
for (repeat1 in repeats1) {
for (repeat2 in repeats2) {
alignment <- pairwiseAlignment(
substr(sequence1, repeat1, length.out = attr(repeat1, "match.length")),
substr(sequence2, repeat2, length.out = attr(repeat2, "match.length")),
substitutionMatrix = matrix(-1, 4, 4)  # Penalty for mismatches
)
mismatches <- sum(as.character(alignment) == "-")  # Count mismatches
if (mismatches <= max_mismatches) {
similar_repeats <- c(similar_repeats, list(repeat1 = repeat1, repeat2 = repeat2))
break
}
}
}
return(similar_repeats)
}
# Example sequences (replace with your actual sequences)
sequence1 <- "ATATATGCGCGCGCGCGC"
sequence2 <- "GCGCGCGCGTATATAT"
repeats1 <- find_tandem_repeats(sequence1)
repeats2 <- find_tandem_repeats(sequence2)
similar_repeats <- compare_and_find_similar_repeats(repeats1, repeats2, max_mismatches = 1)
cat("Similar Tandem Repeats:\n")
for (repeat_pair in similar_repeats) {
cat("Repeat 1:", repeat_pair$repeat1, "\n")
cat("Repeat 2:", repeat_pair$repeat2, "\n")
}
test <- read.delim("test.2",header = FALSE)
test$bp <- as.numeric(gsub("\\D", "", test$V1))
test$grep <- 0
intermediate.df <- data.frame()
for(number in 1:nrow(test)){
row <- test[number,]
if(row$bp > 65){
over65 <- row$bp/65
row$grep <- ceiling(over65)
}else{
row$grep <- 1
}
intermediate.df <- rbind(intermediate.df,row)
}
test$grep <- intermediate.df$grep
View(test)
grep.df <- data.frame()
for(number in 1:nrow(test)){
row <- test[number,]
line <- paste0("grep -A ",row$grep," '",row$V1,"' test >> test.4")
grep.df <- rbind(grep.df,line)
}
names(grep.df) <- NULL
write.table(grep.df,"test.3",row.names = FALSE,col.names = FALSE,quote = FALSE)
library(Biostrings)  # Load the Biostrings package for sequence analysis
find_tandem_repeats <- function(sequence, min_repeat_length = 2) {
tandem_repeats <- list()
pattern <- "(.{"  # Start building the pattern
for (length in min_repeat_length:floor(nchar(sequence) / 2)) {
pattern <- paste0(pattern, length, "}(?:\\1)+|")  # Add the length to the pattern
}
pattern <- substr(pattern, 1, nchar(pattern) - 1)  # Remove the trailing "|"
pattern <- paste0(pattern, ")")  # Close the pattern
matches <- gregexpr(pattern, sequence, perl = TRUE)
for (i in seq_along(matches)) {
match <- matches[[i]]
if (attr(match, "match.length")[1] > 0) {
tandem_repeats <- c(tandem_repeats, match)
}
}
return(tandem_repeats)
}
compare_and_find_similar_repeats <- function(repeats1, repeats2, max_mismatches = 1) {
similar_repeats <- list()
for (repeat1 in repeats1) {
for (repeat2 in repeats2) {
alignment <- pairwiseAlignment(
substr(sequence1, repeat1, length.out = attr(repeat1, "match.length")),
substr(sequence2, repeat2, length.out = attr(repeat2, "match.length")),
substitutionMatrix = matrix(-1, 4, 4)  # Penalty for mismatches
)
mismatches <- sum(as.character(alignment) == "-")  # Count mismatches
if (mismatches <= max_mismatches) {
similar_repeats <- c(similar_repeats, list(repeat1 = repeat1, repeat2 = repeat2))
break
}
}
}
return(similar_repeats)
}
# Example sequences (replace with your actual sequences)
sequence1 <- "TTGGGAGGCCGAGGCGGGCGAATCACTGAGGTCAGGAGATCAAGACCAGCCTGGGCAACACGGTG
AAAACCCATCTCTACTAAAAATACAAAAATTA"
sequence2 <- "GCGAATCACTGAGGTCAGG"
repeats1 <- find_tandem_repeats(sequence1)
repeats2 <- find_tandem_repeats(sequence2)
similar_repeats <- compare_and_find_similar_repeats(repeats1, repeats2, max_mismatches = 1)
cat("Similar Tandem Repeats:\n")
for (repeat_pair in similar_repeats) {
cat("Repeat 1:", repeat_pair$repeat1, "\n")
cat("Repeat 2:", repeat_pair$repeat2, "\n")
}
# Example sequences (replace with your actual sequences)
sequence1 <- "TTGGGAGGCCGAGGCGGGCGAATCACTGAGGTCAGGAGATCAAGACCAGCCTGGGCAACACGGTG
AAAACCCATCTCTACTAAAAATACAAAAATTA"
sequence2 <- "TTGGGAGGCCGAGGCGGGCGAATCACTGAGGTCAGGAGATCAAGACCAGCCTGGGCAACACGGTG
AAAACCCATCTCTACTAAAAATACAAAAATTA"
repeats1 <- find_tandem_repeats(sequence1)
repeats2 <- find_tandem_repeats(sequence2)
similar_repeats <- compare_and_find_similar_repeats(repeats1, repeats2, max_mismatches = 1)
cat("Similar Tandem Repeats:\n")
for (repeat_pair in similar_repeats) {
cat("Repeat 1:", repeat_pair$repeat1, "\n")
cat("Repeat 2:", repeat_pair$repeat2, "\n")
}
sequence1 <- "TTGGGAGGCCGAGGCGGGCGAATCACTGAGGTCAGGAGATCAAGACCAGCCTGGGCAACACGGTG
AAAACCCATCTCTACTAAAAATACAAAAATTA"
sequence2 <- "TTGGGAGGCCGAGGCGGGCGAATCACTGAGGTCAGGAGATCAAGACCAGCCTGGGCAACACGGTG
AAAACCCATCTCTACTAAAAATACAAAAATTA"
repeats1 <- find_tandem_repeats(sequence1)
repeats2 <- find_tandem_repeats(sequence2)
similar_repeats <- compare_and_find_similar_repeats(sequence1, sequence2, max_mismatches = 1)
install.packages(stringdist)
install.packages("stringdist")
string1 <- "kitten"
string2 <- "sitting"
distance <- stringdist::stringdist(string1, string2)
string1 <- "GCCGGGCGCGGTGGCGGTTTTTTTTCCCAGCACTCCGGAAGGCTGAGGCGGGCCGATCACGAGGTCAGGAGATCGAGAACATCCTGGCTAACACGGTGAAACCCCATCTCTACTAAACATACAAAAAAAAAAGTA"
string2 <- "GCCGGGCGCGGTGGCGGGCGCCTGTAGTCCCAGCACTCCGGAAGGCTGAAAAGGGCCGATCACGAGGTCAGGAGATCGAGAACATCCTGGCTAACACGGTGAAACCCCATCTCTACTAAACATACAAAAAAAAAAGTA"
distance <- stringdist::stringdist(string1, string2)
jaccard_similarity_list <- function(list1, list2) {
set1 <- unique(unlist(list1))
set2 <- unique(unlist(list2))
intersection <- length(intersect(set1, set2))
union <- length(union(set1, set2))
similarity <- intersection / union
return(similarity)
}
# Example lists of strings
list1 <- list("apple", "banana", "cherry")
list2 <- list("banana", "cherry", "date")
similarity <- jaccard_similarity_list(list1, list2)
cosine_similarity <- function(str1, str2) {
vec1 <- table(strsplit(str1, "")[[1]])
vec2 <- table(strsplit(str2, "")[[1]])
dot_product <- sum(vec1 * vec2)
magnitude1 <- sqrt(sum(vec1^2))
magnitude2 <- sqrt(sum(vec2^2))
similarity <- dot_product / (magnitude1 * magnitude2)
return(similarity)
}
similarity <- cosine_similarity("kitten", "sitting")
cosine_similarity_list <- function(list1, list2) {
vec1 <- table(unlist(list1))
vec2 <- table(unlist(list2))
dot_product <- sum(vec1 * vec2)
magnitude1 <- sqrt(sum(vec1^2))
magnitude2 <- sqrt(sum(vec2^2))
similarity <- dot_product / (magnitude1 * magnitude2)
return(similarity)
}
# Example lists of strings
list1 <- list("apple", "banana", "cherry")
list2 <- list("banana", "cherry", "date")
similarity <- cosine_similarity_list(list1, list2)
jaccard_similarity_list <- function(list1, list2) {
set1 <- unique(unlist(list1))
set2 <- unique(unlist(list2))
intersection <- length(intersect(set1, set2))
union <- length(union(set1, set2))
similarity <- intersection / union
return(similarity)
}
# Example lists of strings
list1 <- list("apple", "banana", "cherry")
list2 <- list("bananna", "cherry", "date")
similarity <- jaccard_similarity_list(list1, list2)
jaccard_similarity_list <- function(list1, list2) {
set1 <- unique(unlist(list1))
set2 <- unique(unlist(list2))
intersection <- length(intersect(set1, set2))
union <- length(union(set1, set2))
similarity <- intersection / union
return(similarity)
}
# Example lists of strings
list1 <- list("apple", "banana", "cherry")
list2 <- list("bananna", "cherrry", "date")
# Example lists of strings
list1 <- list("apple", "bnnnanana", "cherry")
list2 <- list("banannnna", "cherrry", "date")
similarity <- jaccard_similarity_list(list1, list2)
remove.packages("BSgenome.Hsapiens.UCSC.hg19")
packageVersion("devtools")
create_package("SyntenyPlotteR")
devtools::create_package("SyntenyPlotteR")
usethis::create_package("SyntenyPlotteR")
usethis::create_package("SyntenyPlotteR")
usethis::use_git()
remove.packages("syntenyPlotteR")
setwd("~/SyntenyPlotteR")
devtools::check()
rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran"))
getwd()
devtools::submit_cran()
